module Partial_Full_Adder(A, B, C, S, G, P); 
    input A, B, C; 
    output S, G, P; 
     
    assign G = (A && B); 
    assign S = (A ^ B ^ C); 
    assign P = (A ^ B); 
endmodule 
 
module CLA_Logic(G, P, Cin, Carry, Cout); 
    input [3:0] G, P; 
    input Cin; 
    output [2:0] Carry; 
    output Cout; 
     
    assign Carry[0] = G[0] || (P[0] && Cin); 
    assign Carry[1] = G[1] || (P[1] && G[0]) || (P[1] && P[0] && Cin); 
    assign Carry[2] = G[2] || (P[2] && G[1]) || (P[2] && P[1] && G[0]) || (P[2] && P[1] && P[0] && Cin); 
    assign Cout = G[3] || (P[3] && G[2]) || (P[3] && P[2] && G[1]) || (P[3] && P[2] && P[1] && G[0]) || (P[3] && P[2] && P[1] && P[0] && Cin); 
endmodule 
 
module CLA_4Bit(A, B, Cin, Sum, Cout); 
    input [3:0] A, B; 
    input Cin; 
    output [3:0] Sum; 
    output Cout; 
     
    wire [2:0] Carry; 
    wire [3:0] G, P; 
     
    Partial_Full_Adder F0(A[0], B[0], Cin, Sum[0], G[0], P[0]);  
    Partial_Full_Adder F1(A[1], B[1], Cin, Sum[1], G[1], P[1]); 
    Partial_Full_Adder F2(A[2], B[2], Cin, Sum[2], G[2], P[2]); 
    Partial_Full_Adder F4(A[3], B[3], Cin, Sum[3], G[3], P[3]); 
    CLA_Logic L0(G, P, Cin, Carry, Cout); 
Endmodule
