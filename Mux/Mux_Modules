//2 
module mux_2(in, sel, out); 
  input wire [1:0]in; 
  input wire sel; 
  output reg out; 
 
  always@(*) begin 
    if(sel == 1'b0) 
      out = in[0]; 
    else  
      out = in[1]; 
  end 
endmodule 
 
//4 
module mux_4(in, sel, out); 
  input wire [3:0]in; 
  input wire [1:0]sel; 
  output wire out; 
   
  wire ml0_0_out; 
  wire ml0_1_out; 
 
  mux_2 ml0_0(in[1:0], sel[0], ml0_0_out); 
  mux_2 ml0_1(in[3:2], sel[0], ml0_1_out); 
  mux_2 ml1_0({ml0_1_out, ml0_0_out}, sel[1], 
out); 
endmodule 
 
 
//8 
module mux_8(in, sel, out); 
  input wire [7:0]in; 
  input wire [2:0]sel; 
  output wire out; 
   
  wire out_l0_0; 
  wire out_l0_1; 
  wire out_l0_2; 
  wire out_l0_3; 
   
  wire out_l1_0; 
  wire out_l1_1; 
   
  mux_2 ml0_0(in[1:0], sel[0], out_l0_0); 
  mux_2 ml0_1(in[3:2], sel[0], out_l0_1); 
  mux_2 ml0_2(in[5:4], sel[0], out_l0_2); 
  mux_2 ml0_3(in[7:6], sel[0], out_l0_3); 
   
  mux_2 ml1_0({out_l0_1, out_l0_0}, sel[1], 
out_l1_0); 
  mux_2 ml1_1({out_l0_3, out_l0_2}, sel[1], 
out_l1_1); 
   
  mux_2 ml2({out_l1_1, out_l1_0}, sel[2], out); 
 
endmodule 
