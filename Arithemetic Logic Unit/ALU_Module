module ALU_4bit(A, B, Sel, Cin, Cout, Output); 
    input [3:0] A, B; 
    input [2:0] Sel; 
    input Cin; 
    output [3:0] Output; 
    output Cout; 
     
    reg [3:0] Result; 
    wire [3:0] CoutCal; 
     
    assign Output = Result;  
    assign CoutCal = {1'b0,A} + {1'b0,B}; 
    assign Cout = CoutCal[3];  
     
    always @(*) 
    begin 
        case(Sel) 
        3'b000: // Addition 
           Result = A + B + Cin;  
        3'b001: // Subtraction 
           Result = A - B - Cin; 
        3'b010: //Logical Or 
            Result = A | B; 
        3'b011: //  Logical and  
           Result = A & B; 
        3'b100: // Logical shift left 
           Result = A<<1; 
         3'b101: // Logical shift right 
           Result = A>>1; 
         3'b110: // Rotate left 
           Result = {A[3:0],A[3]}; 
         3'b111: // Rotate right 
           Result = {A[0],A[3:1]};  
        endcase 
    end 
 
endmodule
